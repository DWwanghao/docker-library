From 4840f32df1e9191db084b7f75d32ed5673849f79 Mon Sep 17 00:00:00 2001
From: doupengda <doupengda@loongson.cn>
Date: Tue, 10 Jun 2025 11:20:31 +0800
Subject: [PATCH] loki-3.0.0 add support for loong64

---
 Makefile                                      |   4 +-
 cmd/loki/Dockerfile                           |   7 +-
 .../grafana/pyroscope-go/godeltaprof/LICENSE  | 203 -------------
 .../pyroscope-go/godeltaprof/compat/README.md |   1 +
 .../check_golang_profiler_changes/.gitignore  |   1 +
 .../check_golang_profiler_changes/README.md   |   7 +
 .../last_known_golang_changes.json            |   4 +
 .../cmd/check_golang_profiler_changes/main.go | 268 ++++++++++++++++++
 .../godeltaprof/compat/compression_test.go    |  60 ++++
 .../godeltaprof/compat/delta_test.go          | 165 +++++++++++
 .../godeltaprof/compat/generics_go20_test.go  | 189 ++++++++++++
 .../godeltaprof/compat/generics_go21_test.go  | 196 +++++++++++++
 .../pyroscope-go/godeltaprof/compat/go.mod    |  17 ++
 .../pyroscope-go/godeltaprof/compat/go.sum    |  19 ++
 .../godeltaprof/compat/reject_order_test.go   | 126 ++++++++
 .../godeltaprof/compat/scale_test.go          | 173 +++++++++++
 .../godeltaprof/compat/stackcollapse.go       | 107 +++++++
 .../godeltaprof/compat/stub_go20_test.go      |  18 ++
 .../godeltaprof/compat/stub_go21_test.go      |  26 ++
 .../godeltaprof/compat/stub_test.go           |  57 ++++
 .../godeltaprof/compat/testdata.go            | 225 +++++++++++++++
 .../pyroscope-go/godeltaprof/example/main.go  |  72 +++++
 .../grafana/pyroscope-go/godeltaprof/go.mod   |   5 +
 .../grafana/pyroscope-go/godeltaprof/go.sum   |   2 +
 .../godeltaprof/internal/pprof/stub.go        |   3 -
 vendor/go.etcd.io/bbolt/bolt_loong64.go       |  10 +
 26 files changed, 1755 insertions(+), 210 deletions(-)
 delete mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/LICENSE
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/README.md
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/.gitignore
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/README.md
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/last_known_golang_changes.json
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/main.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/compression_test.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/delta_test.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/generics_go20_test.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/generics_go21_test.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/go.mod
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/go.sum
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/reject_order_test.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/scale_test.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stackcollapse.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_go20_test.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_go21_test.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_test.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/testdata.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/example/main.go
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/go.mod
 create mode 100644 vendor/github.com/grafana/pyroscope-go/godeltaprof/go.sum
 create mode 100644 vendor/go.etcd.io/bbolt/bolt_loong64.go

diff --git a/Makefile b/Makefile
index 9736aa4..60f7d85 100644
--- a/Makefile
+++ b/Makefile
@@ -155,7 +155,7 @@ loki: cmd/loki/loki ## build loki executable
 loki-debug: cmd/loki/loki-debug ## build loki debug executable
 
 cmd/loki/loki:
-	CGO_ENABLED=0 go build $(GO_FLAGS) -o $@ ./$(@D)
+	CGO_ENABLED=0 go build -buildvcs=false $(GO_FLAGS) -o $@ ./$(@D)
 
 cmd/loki/loki-debug:
 	CGO_ENABLED=0 go build $(DEBUG_GO_FLAGS) -o $@ ./$(@D)
@@ -594,7 +594,7 @@ promtail-push: promtail-image-cross
 
 # loki
 loki-image: ## build the loki docker image
-	$(SUDO) docker build -t $(IMAGE_PREFIX)/loki:$(IMAGE_TAG) -f cmd/loki/Dockerfile .
+	$(SUDO) docker build $(DOCKER_BUILD_ARGS) -t $(IMAGE_PREFIX)/loki:$(IMAGE_TAG) -f cmd/loki/Dockerfile .
 loki-image-cross:
 	$(SUDO) $(BUILD_OCI) -t $(IMAGE_PREFIX)/loki:$(IMAGE_TAG) -f cmd/loki/Dockerfile.cross .
 
diff --git a/cmd/loki/Dockerfile b/cmd/loki/Dockerfile
index 55c80ef..4c72cc0 100644
--- a/cmd/loki/Dockerfile
+++ b/cmd/loki/Dockerfile
@@ -1,10 +1,13 @@
-FROM golang:1.21.9 as build
+FROM lcr.loongnix.cn/library/golang:1.23-alpine3.21 as build
 
 COPY . /src/loki
 WORKDIR /src/loki
+
+RUN apk add --no-cache make bash
+
 RUN make clean && make BUILD_IN_CONTAINER=false loki
 
-FROM alpine:3.18.5
+FROM alpine:3.21
 
 RUN apk add --no-cache ca-certificates libcap
 
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/LICENSE b/vendor/github.com/grafana/pyroscope-go/godeltaprof/LICENSE
deleted file mode 100644
index 98c8148..0000000
--- a/vendor/github.com/grafana/pyroscope-go/godeltaprof/LICENSE
+++ /dev/null
@@ -1,203 +0,0 @@
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "[]"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright 2020 Pyroscope
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-   
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/README.md b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/README.md
new file mode 100644
index 0000000..6caa0dc
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/README.md
@@ -0,0 +1 @@
+This module is separate from the godeltaprof to keep the godeltaprof zero dependencies.
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/.gitignore b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/.gitignore
new file mode 100644
index 0000000..7f3f564
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/.gitignore
@@ -0,0 +1 @@
+go_repo/
\ No newline at end of file
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/README.md b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/README.md
new file mode 100644
index 0000000..b866729
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/README.md
@@ -0,0 +1,7 @@
+This command tracks latest commits in src/runtime/mprof.go and src/runtime/pprof
+If there are new commits found it creates a PR to update [last_known_go_commits.json](last_known_go_commits.json) file
+
+The idea is that godeltaprof was based on copy of go runtime internals, so if internals change then we may want to change
+the godeltaprof as well. 
+
+See [godeltaprof incorrectly scales mutex profile](https://github.com/grafana/pyroscope-go/issues/47)
\ No newline at end of file
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/last_known_golang_changes.json b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/last_known_golang_changes.json
new file mode 100644
index 0000000..ad67aff
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/last_known_golang_changes.json
@@ -0,0 +1,4 @@
+{
+  "mprof": "450ecbe90508f56684b69e39823d4da155846932",
+  "pprof": "858cd8da569938913541d013af27a2a2a875fcb5"
+}
\ No newline at end of file
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/main.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/main.go
new file mode 100644
index 0000000..8ff63ac
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/cmd/check_golang_profiler_changes/main.go
@@ -0,0 +1,268 @@
+package main
+
+import (
+	"bytes"
+	"encoding/json"
+	"flag"
+	"fmt"
+	"log"
+	"os"
+	"os/exec"
+	"path"
+	"regexp"
+	"strings"
+	"time"
+)
+
+var gitUserName = flag.String("git.user.name", "", "git user name")
+var gitUserEmail = flag.String("git.user.email", "", "git user email")
+
+const goRepoURL = "https://github.com/golang/go.git"
+
+const myRemote = "origin"
+
+const mprof = "src/runtime/mprof.go"
+const pprof = "src/runtime/pprof"
+const repoDir = "go_repo"
+const latestCommitsFile = "last_known_golang_changes.json"
+const label = "godeltaprof: check_golang_profiler_changes"
+
+type Commits struct {
+	Mprof string `json:"mprof"`
+	Pprof string `json:"pprof"`
+}
+
+var known Commits
+var current Commits
+
+var shMy = sh{}
+var shGo = sh{wd: getRepoDir()}
+
+func main() {
+	flag.Parse()
+
+	updateGoRepo()
+	loadLastKnownCommits()
+	loadCurrentCommits()
+	if known == current {
+		log.Println("no new commits")
+		return
+	}
+	writeLastKnownCommits()
+	createOrUpdatePR()
+}
+
+func createOrUpdatePR() {
+	msg := ""
+	const commitUrl = "https://github.com/golang/go/commit/"
+	msg += "This PR is created by godeltaprof/compat/cmd/check_golang_profiler_changes/main.go to notify src/runtime/mprof.go or src/runtime/pprof in golang are updated.\n"
+	msg += "Please take look at the golang commits and update godeltaprof accordingly if needed.\n"
+	msg += "Merge the PR to acknowledge golang runtime changes and state no further actions needed for godeltaprof.\n\n"
+
+	if current.Mprof != known.Mprof {
+		msg += mprof
+		msg += "\n"
+		msg += "last known [" + known.Mprof + "](" + commitUrl + known.Mprof + ")\n"
+		msg += "current    [" + current.Mprof + "](" + commitUrl + current.Mprof + ")\n"
+		commits, _ := shGo.sh(fmt.Sprintf("git log  %s..%s -- %s", known.Mprof, current.Mprof, mprof))
+		msg += "```\n"
+		msg += commits
+		msg += "\n"
+		msg += "```\n"
+	}
+	//git log  1c0035401358c8bfc2ff646b1d950da5fcd6b355..a7c3de705287d56e3bea8a84ed9a56e4102d3f39 -- src/runtime/mprof.go
+
+	if current.Pprof != known.Pprof {
+		msg += pprof
+		msg += "\n"
+		msg += "last known [" + known.Pprof + "](" + commitUrl + known.Pprof + ")\n"
+		msg += "current    [" + current.Pprof + "](" + commitUrl + current.Pprof + ")\n"
+
+		commits, _ := shGo.sh(fmt.Sprintf("git log  %s..%s -- %s", known.Pprof, current.Pprof, pprof))
+		msg += "```\n"
+		msg += commits
+		msg += "\n"
+		msg += "```\n"
+	}
+	log.Println(msg)
+
+	prs := getPullRequests()
+	found := -1
+out:
+	for i, pr := range prs {
+		for j := range pr.Labels {
+			if pr.Labels[j].Name == label {
+				found = i
+				break out
+			}
+		}
+	}
+
+	prBodyFile := createTempFile(msg)
+
+	if found == -1 {
+		log.Println("existing PR not found, creating a new one")
+		createPR(prBodyFile)
+	} else {
+		log.Printf("found existing PR %+v. updating.", prs[found])
+		updatePR(prBodyFile, prs[found])
+	}
+
+}
+
+func updatePR(prBodyFile string, request PullRequest) {
+	branchName := createBranchName()
+	commitMessage := createCommitMessage()
+
+	shMy.sh(fmt.Sprintf("git checkout -b %s", branchName))
+	if *gitUserName != "" && *gitUserEmail != "" {
+		shMy.sh(fmt.Sprintf("git config user.name '%s'", *gitUserName))
+		shMy.sh(fmt.Sprintf("git config user.email '%s'", *gitUserEmail))
+	}
+	shMy.sh(fmt.Sprintf("git commit -am '%s'", commitMessage))
+	shMy.sh(fmt.Sprintf("git push -f %s %s:%s", myRemote, branchName, request.HeadRefName))
+
+	shMy.sh(fmt.Sprintf("gh pr edit %d --body-file '%s'", request.Number, prBodyFile))
+
+}
+
+func createPR(prBodyFile string) {
+	branchName := createBranchName()
+	commitMessage := createCommitMessage()
+
+	shMy.sh(fmt.Sprintf("git checkout -b %s", branchName))
+	if *gitUserName != "" && *gitUserEmail != "" {
+		shMy.sh(fmt.Sprintf("git config user.name '%s'", *gitUserName))
+		shMy.sh(fmt.Sprintf("git config user.email '%s'", *gitUserEmail))
+	}
+	shMy.sh(fmt.Sprintf("git commit -am '%s'", commitMessage))
+	shMy.sh(fmt.Sprintf("git push %s %s", myRemote, branchName))
+
+	shMy.sh(fmt.Sprintf("gh pr create --title '%s' --body-file '%s' --label '%s' ", commitMessage, prBodyFile, label))
+
+}
+
+func createCommitMessage() string {
+	return fmt.Sprintf("chore(check_golang_profiler_changes): acknowledge new golang profiler changes")
+}
+
+func createBranchName() string {
+	return fmt.Sprintf("check_golang_profiler_changes_%d", time.Now().Unix())
+}
+
+func writeLastKnownCommits() {
+	bs, err := json.MarshalIndent(&current, "", "  ")
+	requireNoError(err, "marshal current commits")
+	err = os.WriteFile(latestCommitsFile, bs, 0666)
+	requireNoError(err, "write current commits")
+}
+
+func loadCurrentCommits() {
+	current.Mprof = checkLatestCommit(mprof)
+	current.Pprof = checkLatestCommit(pprof)
+
+	log.Printf("current commits: %+v\n", current)
+}
+
+func checkLatestCommit(repoPath string) string {
+	s, _ := shGo.sh(fmt.Sprintf("git log -- %s | head -n 1", repoPath))
+	re := regexp.MustCompile("commit ([a-f0-9]{40})")
+	match := re.FindStringSubmatch(s)
+	if match == nil {
+		requireNoError(fmt.Errorf("no commit found for %s %s", repoPath, s), "commit regex")
+	}
+	commit := match[1]
+	log.Println("latest commit ", repoPath, commit)
+	return commit
+}
+
+func loadLastKnownCommits() {
+	bs, err := os.ReadFile(latestCommitsFile)
+	requireNoError(err, "read known_commits.json")
+	err = json.Unmarshal(bs, &known)
+	requireNoError(err, "unmarshal known_commits.json")
+	log.Printf("known commits: %+v\n", known)
+}
+
+func updateGoRepo() {
+	_, err := os.Stat(repoDir)
+	if err != nil {
+		if os.IsNotExist(err) {
+			shMy.sh(fmt.Sprintf("git clone %s %s", goRepoURL, repoDir))
+			log.Println("git clone done")
+		} else {
+			log.Fatal(err)
+		}
+	} else {
+		log.Println("repo exists")
+	}
+
+	shGo.sh("git checkout master && git pull")
+	log.Println("git pull done")
+}
+
+func requireNoError(err error, msg string) {
+	if err != nil {
+		log.Fatalf("msg %s err %v", msg, err)
+	}
+}
+
+func getRepoDir() string {
+	cwd, err := os.Getwd()
+	requireNoError(err, "cwd")
+	return path.Join(cwd, repoDir)
+}
+
+func createTempFile(body string) string {
+	prBodyFile, err := os.CreateTemp("", "check_golang_profiler_changes")
+	requireNoError(err, "create temp file")
+	prBodyFilePath := prBodyFile.Name()
+	prBodyFile.Write([]byte(body))
+	prBodyFile.Close()
+	return prBodyFilePath
+}
+
+type PullRequest struct {
+	BaseRefName string       `json:"baseRefName"`
+	HeadRefName string       `json:"headRefName"`
+	Id          string       `json:"id"`
+	Labels      []IssueLabel `json:"labels"`
+	Number      int          `json:"number"`
+}
+
+type IssueLabel struct {
+	Name string `json:"name"`
+}
+
+func getPullRequests() []PullRequest {
+	s := sh{}
+	stdout, _ := s.sh("gh pr list --json 'id,number,labels,baseRefName,headRefName'")
+	var prs []PullRequest
+	err := json.Unmarshal([]byte(stdout), &prs)
+	requireNoError(err, "unmarshal prs")
+	log.Println("prs", prs)
+	return prs
+}
+
+type sh struct {
+	wd string
+}
+
+func (s *sh) sh(sh string) (string, string) {
+	return s.cmd("/bin/sh", "-c", sh)
+}
+
+func (s *sh) cmd(cmdArgs ...string) (string, string) {
+	log.Printf("cmd %s\n", strings.Join(cmdArgs, " "))
+	cmd := exec.Command(cmdArgs[0], cmdArgs[1:]...)
+	cmd.Dir = s.wd
+	stdout := bytes.NewBuffer(nil)
+	stderr := bytes.NewBuffer(nil)
+	cmd.Stdout = stdout
+	cmd.Stderr = stderr
+	err := cmd.Run()
+	fmt.Println(stdout.String())
+	fmt.Println(stderr.String())
+	requireNoError(err, strings.Join(cmdArgs, " "))
+	return stdout.String(), stderr.String()
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/compression_test.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/compression_test.go
new file mode 100644
index 0000000..4e3cad8
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/compression_test.go
@@ -0,0 +1,60 @@
+package compat
+
+import (
+	"io"
+	"math/rand"
+	"runtime"
+	"testing"
+
+	"github.com/grafana/pyroscope-go/godeltaprof/internal/pprof"
+)
+
+func BenchmarkHeapCompression(b *testing.B) {
+	dh := pprof.DeltaHeapProfiler{}
+	fs := generateMemProfileRecords(512, 32, 239)
+	rng := rand.NewSource(239)
+	objSize := fs[0].AllocBytes / fs[0].AllocObjects
+	nMutations := int(uint(rng.Int63())) % len(fs)
+	b.ResetTimer()
+	for i := 0; i < b.N; i++ {
+		_ = dh.WriteHeapProto(io.Discard, fs, int64(runtime.MemProfileRate), "")
+		for j := 0; j < nMutations; j++ {
+			idx := int(uint(rng.Int63())) % len(fs)
+			fs[idx].AllocObjects += 1
+			fs[idx].AllocBytes += objSize
+			fs[idx].FreeObjects += 1
+			fs[idx].FreeBytes += objSize
+		}
+	}
+}
+
+func BenchmarkMutexCompression(b *testing.B) {
+	for i, scaler := range mutexProfileScalers {
+		name := "ScalerMutexProfile"
+		if i == 1 {
+			name = "ScalerBlockProfile"
+		}
+		b.Run(name, func(b *testing.B) {
+			prevMutexProfileFraction := runtime.SetMutexProfileFraction(-1)
+			runtime.SetMutexProfileFraction(5)
+			defer runtime.SetMutexProfileFraction(prevMutexProfileFraction)
+
+			dh := pprof.DeltaMutexProfiler{}
+			fs := generateBlockProfileRecords(512, 32, 239)
+			rng := rand.NewSource(239)
+			nMutations := int(uint(rng.Int63())) % len(fs)
+			oneBlockCycles := fs[0].Cycles / fs[0].Count
+			b.ResetTimer()
+
+			for i := 0; i < b.N; i++ {
+				_ = dh.PrintCountCycleProfile(io.Discard, "contentions", "delay", scaler, fs)
+				for j := 0; j < nMutations; j++ {
+					idx := int(uint(rng.Int63())) % len(fs)
+					fs[idx].Count += 1
+					fs[idx].Cycles += oneBlockCycles
+				}
+			}
+		})
+
+	}
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/delta_test.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/delta_test.go
new file mode 100644
index 0000000..6e90efa
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/delta_test.go
@@ -0,0 +1,165 @@
+package compat
+
+import (
+	"bytes"
+	"runtime"
+	"testing"
+
+	"github.com/grafana/pyroscope-go/godeltaprof/internal/pprof"
+	"github.com/stretchr/testify/assert"
+)
+
+var (
+	stack0       = [32]uintptr{}
+	stack0Marker string
+	stack1       = [32]uintptr{}
+	stack1Marker string
+)
+
+func init() {
+	fs := getFunctionPointers()
+	stack0 = [32]uintptr{fs[0], fs[1]}
+	stack1 = [32]uintptr{fs[2], fs[3]}
+	stack0Marker = runtime.FuncForPC(fs[1]).Name() + ";" + runtime.FuncForPC(fs[0]).Name()
+	stack1Marker = runtime.FuncForPC(fs[3]).Name() + ";" + runtime.FuncForPC(fs[2]).Name()
+}
+
+func TestDeltaHeap(t *testing.T) {
+	// scale 0 0 0
+	// scale 1 2 705084
+	// scale 2 4 1410169
+	// scale 3 6 2115253
+	// scale 4 8 2820338
+	// scale 5 10 3525422
+	// scale 6 12 4230507
+	// scale 7 15 4935592
+	// scale 8 17 5640676
+	// scale 9 19 6345761
+
+	const testMemProfileRate = 524288
+	const testObjectSize = 327680
+
+	dh := pprof.DeltaHeapProfiler{}
+	dump := func(r ...runtime.MemProfileRecord) *bytes.Buffer {
+		buf := bytes.NewBuffer(nil)
+		err := dh.WriteHeapProto(buf, r, testMemProfileRate, "")
+		assert.NoError(t, err)
+		return buf
+	}
+	r := func(AllocObjects, AllocBytes, FreeObjects, FreeBytes int64, s [32]uintptr) runtime.MemProfileRecord {
+		return runtime.MemProfileRecord{
+			AllocObjects: AllocObjects,
+			AllocBytes:   AllocBytes,
+			FreeBytes:    FreeBytes,
+			FreeObjects:  FreeObjects,
+			Stack0:       s,
+		}
+	}
+
+	p1 := dump(
+		r(0, 0, 0, 0, stack0),
+		r(0, 0, 0, 0, stack1),
+	)
+	expectEmptyProfile(t, p1)
+
+	p2 := dump(
+		r(5, 5*testObjectSize, 0, 0, stack0),
+		r(3, 3*testObjectSize, 3, 3*testObjectSize, stack1),
+	)
+	expectStackFrames(t, p2, stack0Marker, 10, 3525422, 10, 3525422)
+	expectStackFrames(t, p2, stack1Marker, 6, 2115253, 0, 0)
+
+	for i := 0; i < 3; i++ {
+		// if we write same data, stack0 is in use, stack1 should not be present
+		p3 := dump(
+			r(5, 5*testObjectSize, 0, 0, stack0),
+			r(3, 3*testObjectSize, 3, 3*testObjectSize, stack1),
+		)
+		expectStackFrames(t, p3, stack0Marker, 0, 0, 10, 3525422)
+		expectNoStackFrames(t, p3, stack1Marker)
+	}
+
+	p4 := dump(
+		r(5, 5*testObjectSize, 5, 5*testObjectSize, stack0),
+		r(3, 3*testObjectSize, 3, 3*testObjectSize, stack1),
+	)
+	expectEmptyProfile(t, p4)
+
+	p5 := dump(
+		r(8, 8*testObjectSize, 5, 5*testObjectSize, stack0),
+		r(3, 3*testObjectSize, 3, 3*testObjectSize, stack1),
+	)
+	// note, this value depends on scale order, it currently tests the current implementation, but we may change it
+	// to alloc objects to be scale(8) - scale(5) = 17-10 = 7
+	expectStackFrames(t, p5, stack0Marker, 6, 2115253, 6, 2115253)
+	expectNoStackFrames(t, p5, stack1Marker)
+}
+
+func TestDeltaBlockProfile(t *testing.T) {
+	cpuGHz := float64(pprof.Runtime_cyclesPerSecond()) / 1e9
+
+	for i, scaler := range mutexProfileScalers {
+		name := "ScalerMutexProfile"
+		if i == 1 {
+			name = "ScalerBlockProfile"
+		}
+		t.Run(name, func(t *testing.T) {
+			prevMutexProfileFraction := runtime.SetMutexProfileFraction(-1)
+			runtime.SetMutexProfileFraction(5)
+			defer runtime.SetMutexProfileFraction(prevMutexProfileFraction)
+
+			dh := pprof.DeltaMutexProfiler{}
+
+			scale := func(rcount, rcycles int64) (int64, int64) {
+				count, nanosec := pprof.ScaleMutexProfile(scaler, rcount, float64(rcycles)/cpuGHz)
+				inanosec := int64(nanosec)
+				return count, inanosec
+			}
+			dump := func(r ...runtime.BlockProfileRecord) *bytes.Buffer {
+				buf := bytes.NewBuffer(nil)
+				err := dh.PrintCountCycleProfile(buf, "contentions", "delay", scaler, r)
+				assert.NoError(t, err)
+				return buf
+			}
+			r := func(count, cycles int64, s [32]uintptr) runtime.BlockProfileRecord {
+				return runtime.BlockProfileRecord{
+					Count:  count,
+					Cycles: cycles,
+					StackRecord: runtime.StackRecord{
+						Stack0: s,
+					},
+				}
+			}
+
+			p1 := dump(
+				r(0, 0, stack0),
+				r(0, 0, stack1),
+			)
+			expectEmptyProfile(t, p1)
+
+			const cycles = 42
+			p2 := dump(
+				r(239, 239*cycles, stack0),
+				r(0, 0, stack1),
+			)
+			count0, nanos0 := scale(239, 239*cycles)
+			expectStackFrames(t, p2, stack0Marker, count0, nanos0)
+			expectNoStackFrames(t, p2, stack1Marker)
+
+			for j := 0; j < 2; j++ {
+				p3 := dump(
+					r(239, 239*cycles, stack0),
+					r(0, 0, stack1),
+				)
+				expectEmptyProfile(t, p3)
+			}
+
+			count1, nanos1 := scale(240, 240*cycles)
+			p4 := dump(
+				r(240, 240*cycles, stack0),
+			)
+			expectStackFrames(t, p4, stack0Marker, count1-count0, nanos1-nanos0)
+			expectNoStackFrames(t, p4, stack1Marker)
+		})
+	}
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/generics_go20_test.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/generics_go20_test.go
new file mode 100644
index 0000000..7485f9c
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/generics_go20_test.go
@@ -0,0 +1,189 @@
+//go:build go1.18 && !go1.21
+// +build go1.18,!go1.21
+
+package compat
+
+import (
+	"bytes"
+	"runtime"
+	"runtime/pprof"
+	"sync"
+	"testing"
+	"time"
+
+	"github.com/grafana/pyroscope-go/godeltaprof"
+	"github.com/stretchr/testify/require"
+)
+
+func genericAllocFunc[T any](n int) []T {
+	return make([]T, n)
+}
+
+func genericBlock[T any](n int) {
+	for i := 0; i < n; i++ {
+		m.Lock()
+		time.Sleep(100 * time.Millisecond)
+		m.Unlock()
+	}
+}
+
+func triggerGenericBlock() {
+	const iters = 2
+	const workers = 10
+
+	wg := sync.WaitGroup{}
+	wg.Add(workers)
+	for j := 0; j < workers; j++ {
+		go func() {
+			genericBlock[int](iters)
+			wg.Done()
+		}()
+	}
+	wg.Wait()
+}
+
+// TestGenerics tests that pre go1.21 we emmit [...] as generics
+func TestGenericsShape(t *testing.T) {
+
+	prev := runtime.MemProfileRate
+	runtime.MemProfileRate = 1
+	runtime.GC()
+
+	defer func() {
+		runtime.MemProfileRate = prev
+	}()
+
+	_ = genericAllocFunc[int](239)
+
+	runtime.GC()
+
+	const expectedOmmitedShape = "github.com/grafana/pyroscope-go/godeltaprof/compat.TestGenericsShape;github.com/grafana/pyroscope-go/godeltaprof/" +
+		"compat.genericAllocFunc\\[\\.\\.\\.\\]$"
+
+	t.Run("go runtime", func(t *testing.T) {
+		buffer := bytes.NewBuffer(nil)
+		err := pprof.WriteHeapProfile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 1, 2048)
+	})
+
+	t.Run("godeltaprof generics enabled by default", func(t *testing.T) {
+		profiler := godeltaprof.NewHeapProfiler()
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 1, 2048)
+	})
+
+	t.Run("godeltaprof generics disabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewHeapProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: false,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 1, 2048)
+	})
+
+	t.Run("godeltaprof generics enabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewHeapProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: true,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 1, 2048)
+	})
+}
+
+func TestBlock(t *testing.T) {
+	defer runtime.SetBlockProfileRate(0)
+
+	runtime.SetBlockProfileRate(1) // every block
+
+	triggerGenericBlock()
+
+	const expectedOmmitedShape = "github.com/grafana/pyroscope-go/godeltaprof/compat.triggerGenericBlock.func1;github.com/grafana/pyroscope-go/godeltaprof/" +
+		"compat\\.genericBlock\\[\\.\\.\\.\\];sync\\.\\(\\*Mutex\\)\\.Lock"
+
+	t.Run("go runtime", func(t *testing.T) {
+		buffer := bytes.NewBuffer(nil)
+		err := pprof.Lookup("block").WriteTo(buffer, 0)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+
+	t.Run("godeltaprof generics enabled by default", func(t *testing.T) {
+		profiler := godeltaprof.NewBlockProfiler()
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+
+	t.Run("godeltaprof generics disabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewBlockProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: false,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+
+	t.Run("godeltaprof generics enabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewBlockProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: true,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+}
+
+func TestMutex(t *testing.T) {
+	prev := runtime.SetMutexProfileFraction(-1)
+	defer runtime.SetMutexProfileFraction(prev)
+	runtime.SetMutexProfileFraction(1)
+
+	triggerGenericBlock()
+
+	const expectedOmmitedShape = "github.com/grafana/pyroscope-go/godeltaprof/compat.triggerGenericBlock.func1;github.com/grafana/pyroscope-go/godeltaprof/" +
+		"compat\\.genericBlock\\[\\.\\.\\.\\];sync\\.\\(\\*Mutex\\)\\.Unlock"
+
+	t.Run("go runtime", func(t *testing.T) {
+		buffer := bytes.NewBuffer(nil)
+		err := pprof.Lookup("mutex").WriteTo(buffer, 0)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+
+	t.Run("godeltaprof generics enabled by default", func(t *testing.T) {
+		profiler := godeltaprof.NewMutexProfiler()
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+
+	t.Run("godeltaprof generics disabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewMutexProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: false,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+
+	t.Run("godeltaprof generics enabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewMutexProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: true,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/generics_go21_test.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/generics_go21_test.go
new file mode 100644
index 0000000..6178491
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/generics_go21_test.go
@@ -0,0 +1,196 @@
+//go:build go1.21
+// +build go1.21
+
+package compat
+
+import (
+	"bytes"
+	"runtime"
+	"runtime/pprof"
+	"sync"
+	"testing"
+	"time"
+
+	"github.com/grafana/pyroscope-go/godeltaprof"
+	"github.com/stretchr/testify/require"
+)
+
+func genericAllocFunc[T any](n int) []T {
+	return make([]T, n)
+}
+
+func genericBlock[T any](n int) {
+	for i := 0; i < n; i++ {
+		m.Lock()
+		time.Sleep(100 * time.Millisecond)
+		m.Unlock()
+	}
+}
+
+func triggerGenericBlock() {
+	const iters = 2
+	const workers = 10
+
+	wg := sync.WaitGroup{}
+	wg.Add(workers)
+	for j := 0; j < workers; j++ {
+		go func() {
+			genericBlock[int](iters)
+			wg.Done()
+		}()
+	}
+	wg.Wait()
+}
+
+// TestGenerics tests that post go1.21 we emmit [...] as generics by default and [go.shape.int] if enabled
+func TestGenericsShape(t *testing.T) {
+	var buffer *bytes.Buffer
+	var err error
+
+	prev := runtime.MemProfileRate
+	runtime.MemProfileRate = 1
+	runtime.GC()
+
+	defer func() {
+		runtime.MemProfileRate = prev
+	}()
+
+	_ = genericAllocFunc[int](239)
+
+	runtime.GC()
+
+	const expectedRealShape = "github.com/grafana/pyroscope-go/godeltaprof/compat.TestGenericsShape;github.com/grafana/pyroscope-go/godeltaprof/compat.genericAllocFunc\\[go\\.shape\\.int\\]$"
+	const expectedOmmitedShape = "github.com/grafana/pyroscope-go/godeltaprof/compat.TestGenericsShape;github.com/grafana/pyroscope-go/godeltaprof/compat.genericAllocFunc\\[\\.\\.\\.\\]$"
+
+	t.Run("go runtime", func(t *testing.T) {
+		buffer = bytes.NewBuffer(nil)
+		err = pprof.WriteHeapProfile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedRealShape, 1, 2048)
+	})
+
+	t.Run("godeltaprof generics enabled by default", func(t *testing.T) {
+		profiler := godeltaprof.NewHeapProfiler()
+		buffer = bytes.NewBuffer(nil)
+		err = profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedRealShape, 1, 2048)
+	})
+
+	t.Run("godeltaprof generics disabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewHeapProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: false,
+		})
+		buffer = bytes.NewBuffer(nil)
+		err = profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 1, 2048)
+	})
+
+	t.Run("godeltaprof generics enabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewHeapProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: true,
+		})
+		buffer = bytes.NewBuffer(nil)
+		err = profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedRealShape, 1, 2048)
+	})
+}
+
+func TestBlock(t *testing.T) {
+	defer runtime.SetBlockProfileRate(0)
+	runtime.SetBlockProfileRate(1) // every block
+
+	triggerGenericBlock()
+
+	const expectedOmmitedShape = "github.com/grafana/pyroscope-go/godeltaprof/compat.triggerGenericBlock.func1;github.com/grafana/pyroscope-go/godeltaprof/" +
+		"compat\\.genericBlock\\[\\.\\.\\.\\];sync\\.\\(\\*Mutex\\)\\.Lock"
+
+	const expectedRealShape = "github.com/grafana/pyroscope-go/godeltaprof/compat.triggerGenericBlock.func1;github.com/grafana/pyroscope-go/godeltaprof/" +
+		"compat\\.genericBlock\\[go\\.shape\\.int];sync\\.\\(\\*Mutex\\)\\.Lock"
+
+	t.Run("go runtime", func(t *testing.T) {
+		buffer := bytes.NewBuffer(nil)
+		err := pprof.Lookup("block").WriteTo(buffer, 0)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedRealShape, 19)
+	})
+
+	t.Run("godeltaprof generics enabled by default", func(t *testing.T) {
+		profiler := godeltaprof.NewBlockProfiler()
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedRealShape, 19)
+	})
+
+	t.Run("godeltaprof generics disabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewBlockProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: false,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+
+	t.Run("godeltaprof generics enabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewBlockProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: true,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedRealShape, 19)
+	})
+}
+
+func TestMutex(t *testing.T) {
+	prev := runtime.SetMutexProfileFraction(-1)
+	defer runtime.SetMutexProfileFraction(prev)
+	runtime.SetMutexProfileFraction(1)
+
+	triggerGenericBlock()
+
+	const expectedOmmitedShape = "github.com/grafana/pyroscope-go/godeltaprof/compat.triggerGenericBlock.func1;github.com/grafana/pyroscope-go/godeltaprof/" +
+		"compat\\.genericBlock\\[\\.\\.\\.\\];sync\\.\\(\\*Mutex\\)\\.Unlock"
+
+	const expectedRealShape = "github.com/grafana/pyroscope-go/godeltaprof/compat.triggerGenericBlock.func1;github.com/grafana/pyroscope-go/godeltaprof/" +
+		"compat\\.genericBlock\\[go\\.shape\\.int];sync\\.\\(\\*Mutex\\)\\.Unlock"
+
+	t.Run("go runtime", func(t *testing.T) {
+		buffer := bytes.NewBuffer(nil)
+		err := pprof.Lookup("mutex").WriteTo(buffer, 0)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedRealShape, 19)
+	})
+
+	t.Run("godeltaprof generics enabled by default", func(t *testing.T) {
+		profiler := godeltaprof.NewMutexProfiler()
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedRealShape, 19)
+	})
+
+	t.Run("godeltaprof generics disabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewMutexProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: false,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedOmmitedShape, 19)
+	})
+
+	t.Run("godeltaprof generics enabled explicitly", func(t *testing.T) {
+		profiler := godeltaprof.NewMutexProfilerWithOptions(godeltaprof.ProfileOptions{
+			GenericsFrames: true,
+		})
+		buffer := bytes.NewBuffer(nil)
+		err := profiler.Profile(buffer)
+		require.NoError(t, err)
+		expectStackFrames(t, buffer, expectedRealShape, 19)
+	})
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/go.mod b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/go.mod
new file mode 100644
index 0000000..bbe8f66
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/go.mod
@@ -0,0 +1,17 @@
+module github.com/grafana/pyroscope-go/godeltaprof/compat
+
+go 1.18
+
+require (
+	github.com/google/pprof v0.0.0-20231127191134-f3a68a39ae15
+	github.com/grafana/pyroscope-go/godeltaprof v0.1.5
+	github.com/stretchr/testify v1.8.4
+	golang.org/x/tools v0.16.0
+)
+
+require (
+	github.com/davecgh/go-spew v1.1.1 // indirect
+	github.com/pmezard/go-difflib v1.0.0 // indirect
+	golang.org/x/mod v0.14.0 // indirect
+	gopkg.in/yaml.v3 v3.0.1 // indirect
+)
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/go.sum b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/go.sum
new file mode 100644
index 0000000..cc90f97
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/go.sum
@@ -0,0 +1,19 @@
+github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
+github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/google/pprof v0.0.0-20231127191134-f3a68a39ae15 h1:t2sLhFuGXwoomaKLTuoxFfFqqlG1Gp2DpsupXq3UvZ0=
+github.com/google/pprof v0.0.0-20231127191134-f3a68a39ae15/go.mod h1:czg5+yv1E0ZGTi6S6vVK1mke0fV+FaUhNGcd6VRS9Ik=
+github.com/grafana/pyroscope-go/godeltaprof v0.1.5 h1:gkFVqihFRL1Nro2FCC0u6mW47jclef96Zu8I/ykq+4E=
+github.com/grafana/pyroscope-go/godeltaprof v0.1.5/go.mod h1:1HSPtjU8vLG0jE9JrTdzjgFqdJ/VgN7fvxBNq3luJko=
+github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
+github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=
+github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
+golang.org/x/mod v0.14.0 h1:dGoOF9QVLYng8IHTm7BAyWqCqSheQ5pYWGhzW00YJr0=
+golang.org/x/mod v0.14.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=
+golang.org/x/sync v0.5.0 h1:60k92dhOjHxJkrqnwsfl8KuaHbn/5dl0lUPUklKo3qE=
+golang.org/x/tools v0.16.0 h1:GO788SKMRunPIBCXiQyo2AaexLstOrVhuAL5YwsckQM=
+golang.org/x/tools v0.16.0/go.mod h1:kYVVN6I1mBNoB1OX+noeBjbRk4IUEPa7JJ+TJMEooJ0=
+gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
+gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
+gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/reject_order_test.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/reject_order_test.go
new file mode 100644
index 0000000..3b23883
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/reject_order_test.go
@@ -0,0 +1,126 @@
+package compat
+
+import (
+	"bytes"
+	"io"
+	"runtime"
+	"testing"
+
+	gprofile "github.com/google/pprof/profile"
+	"github.com/grafana/pyroscope-go/godeltaprof/internal/pprof"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+)
+
+func TestHeapReject(t *testing.T) {
+	dh := pprof.DeltaHeapProfiler{}
+	fs := generateMemProfileRecords(512, 32, 239)
+	p1 := bytes.NewBuffer(nil)
+	err := dh.WriteHeapProto(p1, fs, int64(runtime.MemProfileRate), "")
+	assert.NoError(t, err)
+	p1Size := p1.Len()
+	profile, err := gprofile.Parse(p1)
+	require.NoError(t, err)
+	ls := stackCollapseProfile(t, profile)
+	assert.Len(t, ls, 512)
+	assert.Len(t, profile.Location, 141)
+	t.Log("p1 size", p1Size)
+
+	p2 := bytes.NewBuffer(nil)
+	err = dh.WriteHeapProto(p2, fs, int64(runtime.MemProfileRate), "")
+	assert.NoError(t, err)
+	p2Size := p2.Len()
+	assert.Less(t, p2Size, 1000)
+	profile, err = gprofile.Parse(p2)
+	require.NoError(t, err)
+	ls = stackCollapseProfile(t, profile)
+	assert.Len(t, ls, 0)
+	assert.Len(t, profile.Location, 0)
+	t.Log("p2 size", p2Size)
+}
+
+func BenchmarkHeapRejectOrder(b *testing.B) {
+	dh := pprof.DeltaHeapProfiler{
+		Options: pprof.ProfileBuilderOptions{
+			GenericsFrames: false,
+			LazyMapping:    true,
+		},
+	}
+	fs := generateMemProfileRecords(512, 32, 239)
+	b.ResetTimer()
+	for i := 0; i < b.N; i++ {
+		dh.WriteHeapProto(io.Discard, fs, int64(runtime.MemProfileRate), "")
+	}
+}
+
+var mutexProfileScalers = []pprof.MutexProfileScaler{
+	pprof.ScalerMutexProfile,
+	pprof.ScalerBlockProfile,
+}
+
+func TestMutexReject(t *testing.T) {
+	for i, scaler := range mutexProfileScalers {
+		name := "ScalerMutexProfile"
+		if i == 1 {
+			name = "ScalerBlockProfile"
+		}
+		t.Run(name, func(t *testing.T) {
+			prevMutexProfileFraction := runtime.SetMutexProfileFraction(-1)
+			runtime.SetMutexProfileFraction(5)
+			defer runtime.SetMutexProfileFraction(prevMutexProfileFraction)
+
+			dh := pprof.DeltaMutexProfiler{}
+			fs := generateBlockProfileRecords(512, 32, 239)
+			p1 := bytes.NewBuffer(nil)
+			err := dh.PrintCountCycleProfile(p1, "contentions", "delay", scaler, fs)
+			assert.NoError(t, err)
+			p1Size := p1.Len()
+			profile, err := gprofile.Parse(p1)
+			require.NoError(t, err)
+			ls := stackCollapseProfile(t, profile)
+			assert.Len(t, ls, 512)
+			assert.Len(t, profile.Location, 141)
+			t.Log("p1 size", p1Size)
+
+			p2 := bytes.NewBuffer(nil)
+			err = dh.PrintCountCycleProfile(p2, "contentions", "delay", scaler, fs)
+			assert.NoError(t, err)
+			p2Size := p2.Len()
+			assert.Less(t, p2Size, 1000)
+			profile, err = gprofile.Parse(p2)
+			require.NoError(t, err)
+			ls = stackCollapseProfile(t, profile)
+			assert.Len(t, ls, 0)
+			assert.Len(t, profile.Location, 0)
+			t.Log("p2 size", p2Size)
+		})
+	}
+}
+
+func BenchmarkMutexRejectOrder(b *testing.B) {
+	for i, scaler := range mutexProfileScalers {
+		name := "ScalerMutexProfile"
+		if i == 1 {
+			name = "ScalerBlockProfile"
+		}
+		b.Run(name, func(b *testing.B) {
+			prevMutexProfileFraction := runtime.SetMutexProfileFraction(-1)
+			runtime.SetMutexProfileFraction(5)
+			defer runtime.SetMutexProfileFraction(prevMutexProfileFraction)
+
+			dh := pprof.DeltaMutexProfiler{
+				Options: pprof.ProfileBuilderOptions{
+					GenericsFrames: false,
+					LazyMapping:    true,
+				},
+			}
+			fs := generateBlockProfileRecords(512, 32, 239)
+			b.ResetTimer()
+
+			for i := 0; i < b.N; i++ {
+				dh.PrintCountCycleProfile(io.Discard, "contentions", "delay", scaler, fs)
+			}
+		})
+
+	}
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/scale_test.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/scale_test.go
new file mode 100644
index 0000000..150ef5d
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/scale_test.go
@@ -0,0 +1,173 @@
+package compat
+
+import (
+	"bytes"
+	"fmt"
+	"io"
+	"math"
+	"runtime"
+	"sync"
+	"testing"
+	"time"
+
+	gprofile "github.com/google/pprof/profile"
+	"github.com/grafana/pyroscope-go/godeltaprof"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+)
+
+var m sync.Mutex
+
+func TestScaleMutex(t *testing.T) {
+	prev := runtime.SetMutexProfileFraction(-1)
+	defer runtime.SetMutexProfileFraction(prev)
+
+	buffer := bytes.NewBuffer(make([]byte, 0, 1024*1024))
+	profiler := godeltaprof.NewMutexProfiler()
+	err := profiler.Profile(io.Discard)
+	require.NoError(t, err)
+
+	const fraction = 5
+	const iters = 5000
+	const workers = 2
+	const expectedCount = workers * iters
+	const expectedTime = expectedCount * 1000000
+
+	runtime.SetMutexProfileFraction(fraction)
+
+	wg := sync.WaitGroup{}
+	wg.Add(workers)
+	for j := 0; j < workers; j++ {
+		go func() {
+			for i := 0; i < iters; i++ {
+				m.Lock()
+				time.Sleep(time.Millisecond)
+				m.Unlock()
+			}
+			wg.Done()
+		}()
+	}
+	wg.Wait()
+
+	err = profiler.Profile(buffer)
+	require.NoError(t, err)
+
+	profile, err := gprofile.Parse(buffer)
+	require.NoError(t, err)
+
+	res := stackCollapseProfile(t, profile)
+
+	my := findStack(t, res, "github.com/grafana/pyroscope-go/godeltaprof/compat.TestScaleMutex")
+	require.NotNil(t, my)
+
+	fmt.Println(my.value[0], my.value[1])
+	fmt.Println(expectedCount, expectedTime)
+
+	assert.Less(t, math.Abs(float64(my.value[0])-float64(expectedCount)), 0.4*float64(expectedCount))
+	assert.Less(t, math.Abs(float64(my.value[1])-float64(expectedTime)), 0.4*float64(expectedTime))
+}
+
+func TestScaleBlock(t *testing.T) {
+	defer runtime.SetBlockProfileRate(0)
+
+	buffer := bytes.NewBuffer(make([]byte, 0, 1024*1024))
+	profiler := godeltaprof.NewBlockProfiler()
+	err := profiler.Profile(io.Discard)
+	require.NoError(t, err)
+
+	const fraction = 5
+	const iters = 5000
+	const workers = 2
+	const expectedCount = workers * iters
+	const expectedTime = expectedCount * 1000000
+
+	runtime.SetBlockProfileRate(fraction)
+
+	wg := sync.WaitGroup{}
+	wg.Add(workers)
+	for j := 0; j < workers; j++ {
+		go func() {
+			for i := 0; i < iters; i++ {
+				m.Lock()
+				time.Sleep(time.Millisecond)
+				m.Unlock()
+			}
+			wg.Done()
+		}()
+	}
+	wg.Wait()
+
+	err = profiler.Profile(buffer)
+	require.NoError(t, err)
+
+	profile, err := gprofile.Parse(buffer)
+	require.NoError(t, err)
+
+	res := stackCollapseProfile(t, profile)
+
+	my := findStack(t, res, "github.com/grafana/pyroscope-go/godeltaprof/compat.TestScaleBlock")
+	require.NotNil(t, my)
+
+	fmt.Println(my.value[0], my.value[1])
+	fmt.Println(expectedCount, expectedTime)
+
+	assert.Less(t, math.Abs(float64(my.value[0])-float64(expectedCount)), 0.4*float64(expectedCount))
+	assert.Less(t, math.Abs(float64(my.value[1])-float64(expectedTime)), 0.4*float64(expectedTime))
+}
+
+var bufs [][]byte
+
+//go:noinline
+func appendBuf(sz int) {
+	elems := make([]byte, 0, sz)
+	bufs = append(bufs, elems)
+}
+
+func TestScaleHeap(t *testing.T) {
+	prev := runtime.MemProfileRate
+	runtime.MemProfileRate = 0
+
+	const size = 64 * 1024
+	const iters = 1024
+
+	const expectedCount = iters
+	const expectedTime = 1000000
+
+	bufs = make([][]byte, 0, iters)
+	defer func() {
+		bufs = nil
+		runtime.MemProfileRate = prev
+	}()
+
+	buffer := bytes.NewBuffer(make([]byte, 0, 1024*1024))
+	profiler := godeltaprof.NewHeapProfiler()
+	err := profiler.Profile(io.Discard)
+	require.NoError(t, err)
+
+	runtime.MemProfileRate = 1
+	for i := 0; i < iters; i++ {
+		appendBuf(size)
+	}
+
+	time.Sleep(time.Second)
+	runtime.GC()
+	time.Sleep(time.Second)
+
+	expected := []int64{iters, iters * size, iters, iters * size}
+	err = profiler.Profile(buffer)
+	require.NoError(t, err)
+
+	profile, err := gprofile.Parse(buffer)
+	require.NoError(t, err)
+
+	res := stackCollapseProfile(t, profile)
+
+	my := findStack(t, res, "github.com/grafana/pyroscope-go/godeltaprof/compat.TestScaleHeap;github.com/grafana/pyroscope-go/godeltaprof/compat.appendBuf")
+	require.NotNil(t, my)
+
+	fmt.Println(my.value)
+	fmt.Println(expected)
+	for i := range my.value {
+		assert.Less(t, math.Abs(float64(my.value[i])-float64(expected[i])), 0.1*float64(expected[i]))
+	}
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stackcollapse.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stackcollapse.go
new file mode 100644
index 0000000..7051ab5
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stackcollapse.go
@@ -0,0 +1,107 @@
+package compat
+
+import (
+	"bytes"
+	"io"
+	"regexp"
+	"sort"
+	"strings"
+	"testing"
+
+	gprofile "github.com/google/pprof/profile"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+)
+
+type stack struct {
+	funcs []string
+	line  string
+	value []int64
+}
+
+func expectEmptyProfile(t *testing.T, buffer io.Reader) {
+	profile, err := gprofile.Parse(buffer)
+	require.NoError(t, err)
+	ls := stackCollapseProfile(t, profile)
+	assert.Empty(t, ls)
+}
+
+func expectNoStackFrames(t *testing.T, buffer *bytes.Buffer, sfPattern string) {
+	profile, err := gprofile.ParseData(buffer.Bytes())
+	require.NoError(t, err)
+	line := findStack(t, stackCollapseProfile(t, profile), sfPattern)
+	assert.Nilf(t, line, "stack frame %s found", sfPattern)
+}
+
+func expectStackFrames(t *testing.T, buffer *bytes.Buffer, sfPattern string, values ...int64) {
+	profile, err := gprofile.ParseData(buffer.Bytes())
+	require.NoError(t, err)
+	line := findStack(t, stackCollapseProfile(t, profile), sfPattern)
+	assert.NotNilf(t, line, "stack frame %s not found", sfPattern)
+	if line != nil {
+		for i := range values {
+			assert.Equalf(t, values[i], line.value[i], "expected %v got %v", values, line.value)
+		}
+	}
+}
+
+func findStack(t *testing.T, res []stack, re string) *stack {
+	rr := regexp.MustCompile(re)
+	for i, re := range res {
+		if rr.MatchString(re.line) {
+			return &res[i]
+		}
+	}
+	return nil
+}
+
+func stackCollapseProfile(t testing.TB, p *gprofile.Profile) []stack {
+	var ret []stack
+	for _, s := range p.Sample {
+		var funcs []string
+		for i := range s.Location {
+
+			loc := s.Location[i]
+			for _, line := range loc.Line {
+				f := line.Function
+				//funcs = append(funcs, fmt.Sprintf("%s:%d", f.Name, line.Line))
+				funcs = append(funcs, f.Name)
+			}
+		}
+		for i := 0; i < len(funcs)/2; i++ {
+			j := len(funcs) - i - 1
+			funcs[i], funcs[j] = funcs[j], funcs[i]
+		}
+
+		ret = append(ret, stack{
+			line:  strings.Join(funcs, ";"),
+			funcs: funcs,
+			value: s.Value,
+		})
+	}
+	sort.Slice(ret, func(i, j int) bool {
+		return strings.Compare(ret[i].line, ret[j].line) < 0
+	})
+	var unique []stack
+	for _, s := range ret {
+		if len(unique) == 0 {
+			unique = append(unique, s)
+			continue
+		}
+		if unique[len(unique)-1].line == s.line {
+			for i := 0; i < len(s.value); i++ {
+				unique[len(unique)-1].value[i] += s.value[i]
+			}
+			continue
+		}
+		unique = append(unique, s)
+
+	}
+	t.Log("============= stackCollapseProfile ================")
+	for _, s := range unique {
+		t.Log(s.line, s.value)
+	}
+	t.Log("===================================================")
+
+	return unique
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_go20_test.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_go20_test.go
new file mode 100644
index 0000000..86efa9f
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_go20_test.go
@@ -0,0 +1,18 @@
+//go:build go1.16 && !go1.21
+// +build go1.16,!go1.21
+
+package compat
+
+import "testing"
+
+func TestRuntimeFrameSymbolName(t *testing.T) {
+	checkSignature(t, "github.com/grafana/pyroscope-go/godeltaprof/internal/pprof",
+		"runtime_FrameSymbolName",
+		"func github.com/grafana/pyroscope-go/godeltaprof/internal/pprof.runtime_FrameSymbolName(f *runtime.Frame) string")
+}
+
+func TestRuntimeFrameStartLine(t *testing.T) {
+	checkSignature(t, "github.com/grafana/pyroscope-go/godeltaprof/internal/pprof",
+		"runtime_FrameStartLine",
+		"func github.com/grafana/pyroscope-go/godeltaprof/internal/pprof.runtime_FrameStartLine(f *runtime.Frame) int")
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_go21_test.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_go21_test.go
new file mode 100644
index 0000000..fc5e586
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_go21_test.go
@@ -0,0 +1,26 @@
+//go:build go1.21
+// +build go1.21
+
+package compat
+
+import (
+	"testing"
+)
+
+func TestRuntimeFrameSymbolName(t *testing.T) {
+	checkSignature(t, "runtime/pprof",
+		"runtime_FrameSymbolName",
+		"func runtime/pprof.runtime_FrameSymbolName(f *runtime.Frame) string")
+	checkSignature(t, "github.com/grafana/pyroscope-go/godeltaprof/internal/pprof",
+		"runtime_FrameSymbolName",
+		"func github.com/grafana/pyroscope-go/godeltaprof/internal/pprof.runtime_FrameSymbolName(f *runtime.Frame) string")
+}
+
+func TestRuntimeFrameStartLine(t *testing.T) {
+	checkSignature(t, "runtime/pprof",
+		"runtime_FrameStartLine",
+		"func runtime/pprof.runtime_FrameStartLine(f *runtime.Frame) int")
+	checkSignature(t, "github.com/grafana/pyroscope-go/godeltaprof/internal/pprof",
+		"runtime_FrameStartLine",
+		"func github.com/grafana/pyroscope-go/godeltaprof/internal/pprof.runtime_FrameStartLine(f *runtime.Frame) int")
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_test.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_test.go
new file mode 100644
index 0000000..c9d97cf
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/stub_test.go
@@ -0,0 +1,57 @@
+package compat
+
+import (
+	"go/types"
+	"strings"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+	"golang.org/x/tools/go/packages"
+)
+
+func TestSignatureExpandFinalInlineFrame(t *testing.T) {
+	checkSignature(t, "github.com/grafana/pyroscope-go/godeltaprof/internal/pprof",
+		"runtime_expandFinalInlineFrame",
+		"func github.com/grafana/pyroscope-go/godeltaprof/internal/pprof.runtime_expandFinalInlineFrame(stk []uintptr) []uintptr")
+}
+
+func TestSignatureCyclesPerSecond(t *testing.T) {
+	checkSignature(t, "github.com/grafana/pyroscope-go/godeltaprof/internal/pprof",
+		"runtime_cyclesPerSecond",
+		"func github.com/grafana/pyroscope-go/godeltaprof/internal/pprof.runtime_cyclesPerSecond() int64")
+}
+
+func TestSignatureCyclesPerSecondRuntime(t *testing.T) {
+	checkSignature(t, "runtime/pprof",
+		"runtime_cyclesPerSecond",
+		"func runtime/pprof.runtime_cyclesPerSecond() int64")
+}
+
+func TestSignatureExpandFinalInlineFrameRuntime(t *testing.T) {
+	checkSignature(t, "runtime/pprof",
+		"runtime_expandFinalInlineFrame",
+		"func runtime/pprof.runtime_expandFinalInlineFrame(stk []uintptr) []uintptr")
+}
+
+func checkSignature(t *testing.T, pkg string, name string, expectedSignature string) {
+	cfg := &packages.Config{
+		Mode:  packages.NeedImports | packages.NeedExportFile | packages.NeedTypes | packages.NeedSyntax,
+		Tests: true,
+	}
+	pkgs, err := packages.Load(cfg, pkg)
+	require.NoError(t, err)
+	found := false
+	for _, p := range pkgs {
+		if strings.Contains(p.ID, ".test") {
+			continue
+		}
+		f := p.Types.Scope().Lookup(name)
+		if f != nil {
+			found = true
+			ff := f.(*types.Func)
+			assert.Equal(t, expectedSignature, ff.String())
+		}
+	}
+	assert.Truef(t, found, "function %s %s not found", pkg, name)
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/testdata.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/testdata.go
new file mode 100644
index 0000000..509ba47
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/compat/testdata.go
@@ -0,0 +1,225 @@
+package compat
+
+import (
+	"go/types"
+	"math/rand"
+	"reflect"
+	"runtime"
+	"strings"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+	"golang.org/x/tools/go/packages"
+)
+
+func getFunctionPointers() []uintptr {
+	return []uintptr{
+		reflect.ValueOf(assert.Truef).Pointer(),
+		reflect.ValueOf(assert.CallerInfo).Pointer(),
+		reflect.ValueOf(assert.Condition).Pointer(),
+		reflect.ValueOf(assert.Conditionf).Pointer(),
+		reflect.ValueOf(assert.Contains).Pointer(),
+		reflect.ValueOf(assert.Containsf).Pointer(),
+		reflect.ValueOf(assert.DirExists).Pointer(),
+		reflect.ValueOf(assert.DirExistsf).Pointer(),
+		reflect.ValueOf(assert.ElementsMatch).Pointer(),
+		reflect.ValueOf(assert.ElementsMatchf).Pointer(),
+		reflect.ValueOf(assert.Empty).Pointer(),
+		reflect.ValueOf(assert.Emptyf).Pointer(),
+		reflect.ValueOf(assert.Equal).Pointer(),
+		reflect.ValueOf(assert.EqualError).Pointer(),
+		reflect.ValueOf(assert.EqualErrorf).Pointer(),
+		reflect.ValueOf(assert.EqualValues).Pointer(),
+		reflect.ValueOf(assert.EqualValuesf).Pointer(),
+		reflect.ValueOf(assert.Equalf).Pointer(),
+		reflect.ValueOf(assert.Error).Pointer(),
+		reflect.ValueOf(assert.ErrorAs).Pointer(),
+		reflect.ValueOf(assert.ErrorAsf).Pointer(),
+		reflect.ValueOf(assert.ErrorIs).Pointer(),
+		reflect.ValueOf(assert.ErrorIsf).Pointer(),
+		reflect.ValueOf(assert.Errorf).Pointer(),
+		reflect.ValueOf(assert.Eventually).Pointer(),
+		reflect.ValueOf(assert.Eventuallyf).Pointer(),
+		reflect.ValueOf(assert.Exactly).Pointer(),
+		reflect.ValueOf(assert.Exactlyf).Pointer(),
+		reflect.ValueOf(assert.Fail).Pointer(),
+		reflect.ValueOf(assert.FailNow).Pointer(),
+		reflect.ValueOf(assert.FailNowf).Pointer(),
+		reflect.ValueOf(assert.Failf).Pointer(),
+		reflect.ValueOf(assert.False).Pointer(),
+		reflect.ValueOf(assert.Falsef).Pointer(),
+		reflect.ValueOf(assert.FileExists).Pointer(),
+		reflect.ValueOf(assert.FileExistsf).Pointer(),
+		reflect.ValueOf(assert.Greater).Pointer(),
+		reflect.ValueOf(assert.GreaterOrEqual).Pointer(),
+		reflect.ValueOf(assert.GreaterOrEqualf).Pointer(),
+		reflect.ValueOf(assert.Greaterf).Pointer(),
+		reflect.ValueOf(assert.HTTPBody).Pointer(),
+		reflect.ValueOf(assert.HTTPBodyContains).Pointer(),
+		reflect.ValueOf(assert.HTTPBodyContainsf).Pointer(),
+		reflect.ValueOf(assert.HTTPBodyNotContains).Pointer(),
+		reflect.ValueOf(assert.HTTPBodyNotContainsf).Pointer(),
+		reflect.ValueOf(assert.HTTPError).Pointer(),
+		reflect.ValueOf(assert.HTTPErrorf).Pointer(),
+		reflect.ValueOf(assert.HTTPRedirect).Pointer(),
+		reflect.ValueOf(assert.HTTPRedirectf).Pointer(),
+		reflect.ValueOf(assert.HTTPStatusCode).Pointer(),
+		reflect.ValueOf(assert.HTTPStatusCodef).Pointer(),
+		reflect.ValueOf(assert.HTTPSuccess).Pointer(),
+		reflect.ValueOf(assert.HTTPSuccessf).Pointer(),
+		reflect.ValueOf(assert.Implements).Pointer(),
+		reflect.ValueOf(assert.Implementsf).Pointer(),
+		reflect.ValueOf(assert.InDelta).Pointer(),
+		reflect.ValueOf(assert.InDeltaMapValues).Pointer(),
+		reflect.ValueOf(assert.InDeltaMapValuesf).Pointer(),
+		reflect.ValueOf(assert.InDeltaSlice).Pointer(),
+		reflect.ValueOf(assert.InDeltaSlicef).Pointer(),
+		reflect.ValueOf(assert.InDeltaf).Pointer(),
+		reflect.ValueOf(assert.InEpsilon).Pointer(),
+		reflect.ValueOf(assert.InEpsilonSlice).Pointer(),
+		reflect.ValueOf(assert.InEpsilonSlicef).Pointer(),
+		reflect.ValueOf(assert.InEpsilonf).Pointer(),
+		reflect.ValueOf(assert.IsDecreasing).Pointer(),
+		reflect.ValueOf(assert.IsDecreasingf).Pointer(),
+		reflect.ValueOf(assert.IsIncreasing).Pointer(),
+		reflect.ValueOf(assert.IsIncreasingf).Pointer(),
+		reflect.ValueOf(assert.IsNonDecreasing).Pointer(),
+		reflect.ValueOf(assert.IsNonDecreasingf).Pointer(),
+		reflect.ValueOf(assert.IsNonIncreasing).Pointer(),
+		reflect.ValueOf(assert.IsNonIncreasingf).Pointer(),
+		reflect.ValueOf(assert.IsType).Pointer(),
+		reflect.ValueOf(assert.IsTypef).Pointer(),
+		reflect.ValueOf(assert.JSONEq).Pointer(),
+		reflect.ValueOf(assert.JSONEqf).Pointer(),
+		reflect.ValueOf(assert.Len).Pointer(),
+		reflect.ValueOf(assert.Lenf).Pointer(),
+		reflect.ValueOf(assert.Less).Pointer(),
+		reflect.ValueOf(assert.LessOrEqual).Pointer(),
+		reflect.ValueOf(assert.LessOrEqualf).Pointer(),
+		reflect.ValueOf(assert.Lessf).Pointer(),
+		reflect.ValueOf(assert.Negative).Pointer(),
+		reflect.ValueOf(assert.Negativef).Pointer(),
+		reflect.ValueOf(assert.Never).Pointer(),
+		reflect.ValueOf(assert.Neverf).Pointer(),
+		reflect.ValueOf(assert.New).Pointer(),
+		reflect.ValueOf(assert.Nil).Pointer(),
+		reflect.ValueOf(assert.Nilf).Pointer(),
+		reflect.ValueOf(assert.NoDirExists).Pointer(),
+		reflect.ValueOf(assert.NoDirExistsf).Pointer(),
+		reflect.ValueOf(assert.NoError).Pointer(),
+		reflect.ValueOf(assert.NoErrorf).Pointer(),
+		reflect.ValueOf(assert.NoFileExists).Pointer(),
+		reflect.ValueOf(assert.NoFileExistsf).Pointer(),
+		reflect.ValueOf(assert.NotContains).Pointer(),
+		reflect.ValueOf(assert.NotContainsf).Pointer(),
+		reflect.ValueOf(assert.NotEmpty).Pointer(),
+		reflect.ValueOf(assert.NotEmptyf).Pointer(),
+		reflect.ValueOf(assert.NotEqual).Pointer(),
+		reflect.ValueOf(assert.NotEqualValues).Pointer(),
+		reflect.ValueOf(assert.NotEqualValuesf).Pointer(),
+		reflect.ValueOf(assert.NotEqualf).Pointer(),
+		reflect.ValueOf(assert.NotErrorIs).Pointer(),
+		reflect.ValueOf(assert.NotErrorIsf).Pointer(),
+		reflect.ValueOf(assert.NotNil).Pointer(),
+		reflect.ValueOf(assert.NotNilf).Pointer(),
+		reflect.ValueOf(assert.NotPanics).Pointer(),
+		reflect.ValueOf(assert.NotPanicsf).Pointer(),
+		reflect.ValueOf(assert.NotRegexp).Pointer(),
+		reflect.ValueOf(assert.NotRegexpf).Pointer(),
+		reflect.ValueOf(assert.NotSame).Pointer(),
+		reflect.ValueOf(assert.NotSamef).Pointer(),
+		reflect.ValueOf(assert.NotSubset).Pointer(),
+		reflect.ValueOf(assert.NotSubsetf).Pointer(),
+		reflect.ValueOf(assert.NotZero).Pointer(),
+		reflect.ValueOf(assert.NotZerof).Pointer(),
+		reflect.ValueOf(assert.ObjectsAreEqual).Pointer(),
+		reflect.ValueOf(assert.ObjectsAreEqualValues).Pointer(),
+		reflect.ValueOf(assert.Panics).Pointer(),
+		reflect.ValueOf(assert.PanicsWithError).Pointer(),
+		reflect.ValueOf(assert.PanicsWithErrorf).Pointer(),
+		reflect.ValueOf(assert.PanicsWithValue).Pointer(),
+		reflect.ValueOf(assert.PanicsWithValuef).Pointer(),
+		reflect.ValueOf(assert.Panicsf).Pointer(),
+		reflect.ValueOf(assert.Positive).Pointer(),
+		reflect.ValueOf(assert.Positivef).Pointer(),
+		reflect.ValueOf(assert.Regexp).Pointer(),
+		reflect.ValueOf(assert.Regexpf).Pointer(),
+		reflect.ValueOf(assert.Same).Pointer(),
+		reflect.ValueOf(assert.Samef).Pointer(),
+		reflect.ValueOf(assert.Subset).Pointer(),
+		reflect.ValueOf(assert.Subsetf).Pointer(),
+		reflect.ValueOf(assert.True).Pointer(),
+		reflect.ValueOf(assert.Truef).Pointer(),
+		reflect.ValueOf(assert.WithinDuration).Pointer(),
+		reflect.ValueOf(assert.WithinDurationf).Pointer(),
+		reflect.ValueOf(assert.YAMLEq).Pointer(),
+		reflect.ValueOf(assert.YAMLEqf).Pointer(),
+		reflect.ValueOf(assert.Zero).Pointer(),
+		reflect.ValueOf(assert.Zerof).Pointer(),
+	}
+}
+
+func generateMemProfileRecords(n, depth, seed int) []runtime.MemProfileRecord {
+	var records []runtime.MemProfileRecord
+	rng := rand.NewSource(int64(seed))
+	fs := getFunctionPointers()
+	for i := 0; i < n; i++ {
+		nobj := int(uint64(rng.Int63())) % 1000000
+		r := runtime.MemProfileRecord{
+			AllocObjects: int64(nobj),
+			AllocBytes:   int64(nobj * 1024),
+			FreeObjects:  int64(nobj), // pretend inuse is zero
+			FreeBytes:    int64(nobj * 1024),
+		}
+		for j := 0; j < depth; j++ {
+			r.Stack0[j] = fs[int(uint64(rng.Int63()))%len(fs)]
+		}
+		records = append(records, r)
+	}
+	return records
+}
+
+func generateBlockProfileRecords(n, depth, seed int) []runtime.BlockProfileRecord {
+	var records []runtime.BlockProfileRecord
+	rng := rand.NewSource(int64(seed))
+	fs := getFunctionPointers()
+	for i := 0; i < n; i++ {
+		nobj := int(uint64(rng.Int63())) % 1000000
+		r := runtime.BlockProfileRecord{
+			Count:  int64(nobj),
+			Cycles: int64(nobj * 10),
+		}
+		for j := 0; j < depth; j++ {
+			r.Stack0[j] = fs[int(uint64(rng.Int63()))%len(fs)]
+		}
+		records = append(records, r)
+	}
+	return records
+}
+
+func getFunctions(t testing.TB, pkg string) []*types.Func {
+	var res []*types.Func
+	cfg := &packages.Config{
+		Mode:  packages.NeedImports | packages.NeedExportFile | packages.NeedTypes | packages.NeedSyntax,
+		Tests: true,
+	}
+	pkgs, err := packages.Load(cfg, pkg)
+	require.NoError(t, err)
+	for _, p := range pkgs {
+		if strings.Contains(p.ID, ".test") {
+			continue
+		}
+		for _, name := range p.Types.Scope().Names() {
+			f := p.Types.Scope().Lookup(name)
+
+			if f != nil {
+				ff, ok := f.(*types.Func)
+				if ok {
+					res = append(res, ff)
+				}
+			}
+		}
+	}
+	return res
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/example/main.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/example/main.go
new file mode 100644
index 0000000..107033a
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/example/main.go
@@ -0,0 +1,72 @@
+package main
+
+import (
+	"bytes"
+	"fmt"
+	"net/http"
+	_ "net/http/pprof"
+	"runtime"
+	"sync"
+	"time"
+
+	"github.com/grafana/pyroscope-go/godeltaprof"
+	_ "github.com/grafana/pyroscope-go/godeltaprof/http/pprof"
+)
+
+//go:noinline
+func work(n int) {
+	// revive:disable:empty-block this is fine because this is a example app, not real production code
+	for i := 0; i < n; i++ {
+	}
+	fmt.Printf("work\n")
+	// revive:enable:empty-block
+}
+
+var m sync.Mutex
+
+func fastFunction(wg *sync.WaitGroup) {
+	m.Lock()
+	defer m.Unlock()
+
+	work(200000000)
+
+	wg.Done()
+}
+
+func slowFunction(wg *sync.WaitGroup) {
+	m.Lock()
+	defer m.Unlock()
+
+	work(800000000)
+	wg.Done()
+}
+
+func main() {
+	go func() {
+		err := http.ListenAndServe("localhost:6060", http.DefaultServeMux)
+		if err != nil {
+			panic(err)
+		}
+	}()
+	go func() {
+		deltaHeapProfiler := godeltaprof.NewHeapProfiler()
+		deltaBlockProfiler := godeltaprof.NewBlockProfiler()
+		deltaMutexProfiler := godeltaprof.NewMutexProfiler()
+		for {
+			time.Sleep(10 * time.Second)
+			deltaHeapProfiler.Profile(bytes.NewBuffer(nil))
+			deltaBlockProfiler.Profile(bytes.NewBuffer(nil))
+			deltaMutexProfiler.Profile(bytes.NewBuffer(nil))
+		}
+	}()
+	runtime.SetMutexProfileFraction(5)
+	runtime.SetBlockProfileRate(5)
+
+	for {
+		wg := sync.WaitGroup{}
+		wg.Add(2)
+		go fastFunction(&wg)
+		go slowFunction(&wg)
+		wg.Wait()
+	}
+}
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/go.mod b/vendor/github.com/grafana/pyroscope-go/godeltaprof/go.mod
new file mode 100644
index 0000000..0fbc602
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/go.mod
@@ -0,0 +1,5 @@
+module github.com/grafana/pyroscope-go/godeltaprof
+
+go 1.16
+
+require github.com/klauspost/compress v1.17.3
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/go.sum b/vendor/github.com/grafana/pyroscope-go/godeltaprof/go.sum
new file mode 100644
index 0000000..0d8e8f5
--- /dev/null
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/go.sum
@@ -0,0 +1,2 @@
+github.com/klauspost/compress v1.17.3 h1:qkRjuerhUU1EmXLYGkSH6EZL+vPSxIrYjLNAK4slzwA=
+github.com/klauspost/compress v1.17.3/go.mod h1:/dCuZOvVtNoHsyb+cuJD3itjs3NbnF6KH9zAO4BDxPM=
diff --git a/vendor/github.com/grafana/pyroscope-go/godeltaprof/internal/pprof/stub.go b/vendor/github.com/grafana/pyroscope-go/godeltaprof/internal/pprof/stub.go
index c617015..41dee8b 100644
--- a/vendor/github.com/grafana/pyroscope-go/godeltaprof/internal/pprof/stub.go
+++ b/vendor/github.com/grafana/pyroscope-go/godeltaprof/internal/pprof/stub.go
@@ -1,6 +1,3 @@
-//go:build go1.16 && !go1.23
-// +build go1.16,!go1.23
-
 package pprof
 
 // unsafe is required for go:linkname
diff --git a/vendor/go.etcd.io/bbolt/bolt_loong64.go b/vendor/go.etcd.io/bbolt/bolt_loong64.go
new file mode 100644
index 0000000..31c17c1
--- /dev/null
+++ b/vendor/go.etcd.io/bbolt/bolt_loong64.go
@@ -0,0 +1,10 @@
+//go:build loong64
+// +build loong64
+
+package bbolt
+
+// maxMapSize represents the largest mmap size supported by Bolt.
+const maxMapSize = 0xFFFFFFFFFFFF // 256TB
+
+// maxAllocSize is the size used when creating array pointers.
+const maxAllocSize = 0x7FFFFFFF
-- 
2.41.0

